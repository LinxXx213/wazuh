#ifndef __SEND_REPORT_HPP
#define __SEND_REPORT_HPP

#include "chainOfResponsability.hpp"
#include "loggerHelper.h"
#include "scanContext.hpp"
#include "socketClient.hpp"
#include "vulnerabilityScanner.hpp"

const std::string LOCALFILE_MQ {"1"};
extern int SOCKET_WAIT;

/**
 * @brief Class in charge to send formatted report messages.
 *
 */
class SendReport final : public AbstractHandler<std::shared_ptr<ScanContext>>
{
private:
    std::shared_ptr<SocketClient<Socket<OSPrimitives, NoHeaderProtocol>, EpollWrapper>> m_reportSocketClient;

public:
    // LCOV_EXCL_START
    /**
     * @brief Construct a new Send Report object
     *
     * @param reportSocketClient Socket client instance.
     */
    explicit SendReport(
        std::shared_ptr<SocketClient<Socket<OSPrimitives, NoHeaderProtocol>, EpollWrapper>> reportSocketClient)
        : m_reportSocketClient(reportSocketClient)
    {
    }

    /**
     * @brief Handles request and passes control to the next step of the chain.
     *
     * @param data Scan context.
     * @return std::shared_ptr<ScanContext> Abstract handler.
     */
    std::shared_ptr<ScanContext> handleRequest(std::shared_ptr<ScanContext> data) override
    {
        for (const auto& [key, value] : data->m_elements)
        {
            try
            {
                std::ostringstream oss;
                nlohmann::json vulnerabilityReport;

                vulnerabilityReport["vulnerability"] = value.at("data").at("vulnerability");
                vulnerabilityReport["vulnerability"]["package"] = value.at("data").at("package");

                // 1:[001] (agent_name) ip->location:
                oss << LOCALFILE_MQ << ":"
                    << "[" << value.at("data").at("agent").at("id").get_ref<const std::string&>() << "] ("
                    << value.at("data").at("agent").at("name").get_ref<const std::string&>() << ") "
                    << value.at("data").at("agent").at("ip").get_ref<const std::string&>() << "->" << VS_WM_NAME
                    << ":"
                    // Vulnerability report.
                    << vulnerabilityReport.dump();

                const std::string message = oss.str();
                m_reportSocketClient->send(message.c_str(), message.size());

                std::this_thread::sleep_for(std::chrono::microseconds(SOCKET_WAIT));
            }
            catch (...)
            {
                logWarn(WM_VULNSCAN_LOGTAG, "Couldn't send vulnerability JSON report");
            }
        }
        return AbstractHandler<std::shared_ptr<ScanContext>>::handleRequest(data);
    }
    // LCOV_EXCL_STOP
};

#endif // __SEND_REPORT_HPP
